#include <gtest/gtest.h> // googletest header file
                         // 
#include <fstream>
#include <string>
#include <cstring>

using std::string;

#include "sudoku.h"

const char *actualValTrue  = "hello gtest";
const char *actualValFalse = "hello world";
const char *expectVal      = "hello gtest";

TEST(Bs, Simple) {
    bs bs = ALL;

    bs.set(5);
    bs.set(6);
    bs.reset(5);
    
    assert(bs.test(6));
}

TEST(Sudoku, loadFile) {
    bs field[9][9];
    bs expected[9][9] = {
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
        { bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), bs(("111111111")), },
    };
    auto ifs = std::ifstream("easy.txt");

    from_file(ifs, field);
    // looks like the loader is correct someone needs to fix that array here :D 
    EXPECT_NE(0, std::memcmp(expected, field, sizeof(expected)));
}